import { complex } from '../../utils/complex';

import {
  makeFanFunction,
  makeNgonFunction,
  makeRingsFunction,
  makePowerFunction,
  makePopCornFunction,
  makeWaveFunction,
  makeSwirlFunction,
  makeBlobFunction,
  makePDJFunction,
  makePerspectiveFunction,
  makeCurlFunction,
  makeLinearFunction,
  makeMobiusFunction,
  makeSinusoidalFunction,
  makeSphericalFunction,
  makeMagnifyFunction,
  makeHorseshoeFunction,
  makePolarFunction,
  makeHandkerchiefFunction,
  makeDiskFunction,
  makeSpiralFunction,
  makeHyperbolicFunction,
  makeDiamondFunction,
  makeExFunction,
  makeBentFunction,
  makeJuliaFunction,
  makeFisheyeFunction,
  makeExponentialFunction,
  makeCosineFunction,
  makeBubbleFunction,
  makeTangentFunction,
  makeCylinderFunction,
  makeRotationFunction,
  makeShearFunction,
  makeTranslationFunction,
  makeScaleFunction,
  makeIdentityFunction,
  makeJuliaScopeFunction,
  makeIteratedMandelbrotFunction,
  makeCircleFunction,
  makeHypocycloidFunction,
  makeEpicycloidFunction,
  makeEpitrochoidFunction,
  makeCardioidFunction,
  makeSplitFunction,
  makeCpowFunction,
  makeTwintrianFunction,
  makeCrossFunction,
  makeBladeFunction,
  makeRaysFunction,
  makeRectanglesFunction,
  makeTriangleFunction,
  makeHeartFunction,
  makeFan2Function,
  makePolynomialFunction
} from '../../transform';
import { mkdirs } from '../../utils/fs';
import { Index, Transform2D } from '../../utils/types';
import { plotDomainColoring } from '../util';

const OUTPUT_DIRECTORY = `${__dirname}/../../output/domain-coloring`;
mkdirs(OUTPUT_DIRECTORY);

const TRANSFORMATIONS: Index<Transform2D> = {
  identity: makeIdentityFunction(),
  translation: makeTranslationFunction(0.5, 0.5),
  rotation: makeRotationFunction(Math.PI / 4),
  shear: makeShearFunction(1, 0),
  scale: makeScaleFunction(0.5, 0.5),
  linear0: makeLinearFunction(1, 0, 0, 0, 1, 0),
  linear1: makeLinearFunction(0.8, 0.9, 0, 0, 0.8, 0),
  linear2: makeLinearFunction(0.7, -0.7, 0, 0.7, 0.7, 0),
  mobius: makeMobiusFunction(complex(0.5, -0.8), complex(0.8, -0.2), complex(0.8, -0.5), complex(0.2, 0.1)),
  sinusoidal: makeSinusoidalFunction(),
  spherical: makeSphericalFunction(),
  magnify: makeMagnifyFunction(),
  swirl: makeSwirlFunction(1, 0),
  horseshoe: makeHorseshoeFunction(),
  polar: makePolarFunction(),
  handkerchief: makeHandkerchiefFunction(),
  disk: makeDiskFunction(),
  spiral: makeSpiralFunction(),
  hyperbolic: makeHyperbolicFunction(),
  diamond: makeDiamondFunction(),
  ex: makeExFunction(),
  julia: makeJuliaFunction(complex(-0.9, 0.4)),
  bent: makeBentFunction(),
  wave1: makeWaveFunction(0.5, 0.25, 0, 1),
  wave2: makeWaveFunction(0, 1, 0.5, 0.25),
  wave3: makeWaveFunction(0.5, 0.5, 0.5, 0.25),
  fisheye: makeFisheyeFunction(),
  popcorn: makePopCornFunction(1, 1),
  exponential: makeExponentialFunction(),
  power: makePowerFunction(0),
  cosine: makeCosineFunction(),
  rings: makeRingsFunction(0.5),
  fan: makeFanFunction(0.5, Math.PI * 1.2),
  fan2: makeFan2Function(0.5, 1),
  blob: makeBlobFunction(1, -1, 2 * Math.PI),
  pdj: makePDJFunction(1, 2, 1, 2),
  bubble: makeBubbleFunction(),
  cylinder: makeCylinderFunction(),
  perspective: makePerspectiveFunction(1, 1),
  ngon: makeNgonFunction(5, 5, 0.5, 0.5),
  curl: makeCurlFunction(1, 1),
  tangent: makeTangentFunction(),
  circle: makeCircleFunction(1),
  juliaScope: makeJuliaScopeFunction(5, 2),
  iteratedMandelbrot: makeIteratedMandelbrotFunction(5, 3),
  epicycloid: makeEpicycloidFunction(4),
  epitrochoid: makeEpitrochoidFunction(0.1, 0.3, 0.05),
  hypocycloid: makeHypocycloidFunction(4),
  cardioid: makeCardioidFunction(0.5),
  triangle: makeTriangleFunction(0.5),
  split: makeSplitFunction(0.1, 0.1),
  cpow: makeCpowFunction(complex(0.96, 0.2)),
  twintrian: makeTwintrianFunction(1),
  cross: makeCrossFunction(3),
  blade: makeBladeFunction(1),
  rays: makeRaysFunction(1),
  rectangles: makeRectanglesFunction(0.5, 0.25),
  heart: makeHeartFunction(),
  polynomial: makePolynomialFunction(0, 0.2, -0.3, -1.6, 0, 0.8, -2.4)
};

// plot all transformations
Object.keys(TRANSFORMATIONS).forEach(key => plotDomainColoring(`${OUTPUT_DIRECTORY}/domaincoloring-${key}.png`, `${__dirname}/ada-big.png`, TRANSFORMATIONS[key]));
